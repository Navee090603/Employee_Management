   CREATE DATABASE PayrollManagementDB;
   USE PayrollManagementDB

--for emplyee table

   CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY IDENTITY(1,1),
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Department VARCHAR(50),
    Designation VARCHAR(50),
    BaseSalary DECIMAL(12,2) NOT NULL,
    JoinDate DATE NOT NULL,
    IsActive BIT DEFAULT 1
)

--for attendence table

CREATE TABLE Attendance (
    AttendanceID INT PRIMARY KEY IDENTITY(1,1),
    EmployeeID INT NOT NULL,
    Date DATE NOT NULL,
    Status VARCHAR(10) NOT NULL CHECK (Status IN ('Present', 'Absent', 'Leave')),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
)

--for payroll table

CREATE TABLE Payroll (
    PayrollID INT PRIMARY KEY IDENTITY(1,1),
    EmployeeID INT NOT NULL,
    Month VARCHAR(7) NOT NULL, -- Format: 'YYYY-MM'
    PaidDays INT NOT NULL,
    Deductions DECIMAL(12,2) DEFAULT 0,
    NetSalary DECIMAL(12,2) NOT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
)

--for user table

CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY(1,1),
    Username VARCHAR(50) NOT NULL UNIQUE,
    PasswordHash VARCHAR(255) NOT NULL,
    Role VARCHAR(20) NOT NULL CHECK (Role IN ('Admin', 'Employee')),
    EmployeeID INT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
)


-- 1. Create AuditLog Table
CREATE TABLE AuditLog (
    LogID INT PRIMARY KEY IDENTITY(1,1),
    UserName VARCHAR(50) NOT NULL,      -- Store SQL login or passed username
    Action VARCHAR(100) NOT NULL,
    TableName VARCHAR(50) NOT NULL,
    RecordID INT,
    Timestamp DATETIME NOT NULL DEFAULT GETDATE(),
    Details VARCHAR(500)
)

-- =========================================
-- TRIGGERS FOR Employees TABLE
-- =========================================

-- INSERT Trigger
CREATE TRIGGER trg_Audit_Employees_Insert
ON Employees
AFTER INSERT
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,    -- Logs the SQL Server login name
        'INSERT',
        'Employees',
        i.EmployeeID,
        CONCAT('Added employee: ', i.Name, ', Email: ', i.Email)
    FROM inserted i;
END
GO

-- UPDATE Trigger
CREATE TRIGGER trg_Audit_Employees_Update
ON Employees
AFTER UPDATE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'UPDATE',
        'Employees',
        i.EmployeeID,
        CONCAT('Updated employee: ', i.Name, ', Email: ', i.Email)
    FROM inserted i;
END
GO

-- DELETE Trigger
CREATE TRIGGER trg_Audit_Employees_Delete
ON Employees
AFTER DELETE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'DELETE',
        'Employees',
        d.EmployeeID,
        CONCAT('Deleted employee: ', d.Name, ', Email: ', d.Email)
    FROM deleted d;
END
GO

-- =========================================
-- TRIGGERS FOR Attendance TABLE
-- =========================================

-- INSERT Trigger
CREATE TRIGGER trg_Audit_Attendance_Insert
ON Attendance
AFTER INSERT
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'INSERT',
        'Attendance',
        i.AttendanceID,
        CONCAT('Added attendance for EmployeeID: ', i.EmployeeID, ', Date: ', i.Date, ', Status: ', i.Status)
    FROM inserted i;
END
GO

-- UPDATE Trigger
CREATE TRIGGER trg_Audit_Attendance_Update
ON Attendance
AFTER UPDATE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'UPDATE',
        'Attendance',
        i.AttendanceID,
        CONCAT('Updated attendance for EmployeeID: ', i.EmployeeID, ', Date: ', i.Date, ', Status: ', i.Status)
    FROM inserted i;
END
GO

-- DELETE Trigger
CREATE TRIGGER trg_Audit_Attendance_Delete
ON Attendance
AFTER DELETE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'DELETE',
        'Attendance',
        d.AttendanceID,
        CONCAT('Deleted attendance for EmployeeID: ', d.EmployeeID, ', Date: ', d.Date, ', Status: ', d.Status)
    FROM deleted d;
END
GO

-- =========================================
-- TRIGGERS FOR Payroll TABLE
-- =========================================

-- INSERT Trigger
CREATE TRIGGER trg_Audit_Payroll_Insert
ON Payroll
AFTER INSERT
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'INSERT',
        'Payroll',
        i.PayrollID,
        CONCAT('Added payroll for EmployeeID: ', i.EmployeeID, ', Month: ', i.Month, ', NetSalary: ', i.NetSalary)
    FROM inserted i;
END
GO

-- UPDATE Trigger
CREATE TRIGGER trg_Audit_Payroll_Update
ON Payroll
AFTER UPDATE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'UPDATE',
        'Payroll',
        i.PayrollID,
        CONCAT('Updated payroll for EmployeeID: ', i.EmployeeID, ', Month: ', i.Month, ', NetSalary: ', i.NetSalary)
    FROM inserted i;
END
GO

-- DELETE Trigger
CREATE TRIGGER trg_Audit_Payroll_Delete
ON Payroll
AFTER DELETE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'DELETE',
        'Payroll',
        d.PayrollID,
        CONCAT('Deleted payroll for EmployeeID: ', d.EmployeeID, ', Month: ', d.Month, ', NetSalary: ', d.NetSalary)
    FROM deleted d;
END
GO

-- =========================================
-- TRIGGERS FOR Users TABLE
-- =========================================

-- INSERT Trigger
CREATE TRIGGER trg_Audit_Users_Insert
ON Users
AFTER INSERT
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'INSERT',
        'Users',
        i.UserID,
        CONCAT('Added user: ', i.Username, ', Role: ', i.Role)
    FROM inserted i;
END
GO

-- UPDATE Trigger
CREATE TRIGGER trg_Audit_Users_Update
ON Users
AFTER UPDATE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'UPDATE',
        'Users',
        i.UserID,
        CONCAT('Updated user: ', i.Username, ', Role: ', i.Role)
    FROM inserted i;
END
GO

-- DELETE Trigger
CREATE TRIGGER trg_Audit_Users_Delete
ON Users
AFTER DELETE
AS
BEGIN
    INSERT INTO AuditLog (UserName, Action, TableName, RecordID, Details)
    SELECT
        SYSTEM_USER,
        'DELETE',
        'Users',
        d.UserID,
        CONCAT('Deleted user: ', d.Username, ', Role: ', d.Role)
    FROM deleted d;
END
GO
